
#include "ssix_interface.h"
#include "internal.h"

static int hss_serv_init(){
	
	struct disp_when data;
	
	memset(&data, 0, sizeof(data));
	data.app = ss_app;

	/* Rigister handler for ULR */
	data.command = ss_cmd_ulr;
	CHECK_FCT( fd_disp_register( ss_ulr_ans_cb, DISP_HOW_CC, &data, NULL, NULL ) );

	/* Rigister handler for AIR message*/
	data.command = ss_cmd_air;
	CHECK_FCT( fd_disp_register( ss_air_ans_cb, DISP_HOW_CC, &data, NULL, NULL ) );

	/* Rigister handler for PUR */
	data.command = ss_cmd_pur;
	CHECK_FCT( fd_disp_register( ss_pur_ans_cb, DISP_HOW_CC, &data, NULL, NULL ) );

	/* Rigister handler for NOR */
	data.command = ss_cmd_nor;
	CHECK_FCT( fd_disp_register( ss_nor_ans_cb, DISP_HOW_CC, &data, NULL, NULL ) );
	
	return 1;
}

int ss_hss_init(){

	int ret;

	/* Initialize the core library */
	ret = fd_core_initialize();
	if (ret != 0) {
		fprintf(stderr, "An error occurred during freeDiameter core library initialization.\n");
		return ret;
	}

	/* Parse the configuration file */
	CHECK_FCT_DO( fd_core_parseconf(NULL), goto error );

	/*Initialize the required avp dictionary*/
	ss_dict_init();

	/* Start the servers */
	CHECK_FCT_DO( fd_core_start(), goto error );	
	TRACE_DEBUG(INFO, FD_PROJECT_BINARY " Diameter initialized.");

	/* Advertise the support for the s6 interface application in the peer */
	CHECK_FCT( fd_disp_app_support ( ss_app, ss_vendor, 1, 0 ) );	
	
	/*start diameter mme server*/
	hss_serv_init();	
	
	return 0;

error:	
	CHECK_FCT_DO( fd_core_shutdown(),  );
	CHECK_FCT( fd_core_wait_shutdown_complete() );
	return -1;	
}



