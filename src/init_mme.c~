
#include "ssix_interface.h"
#include "internal.h"

static int mme_serv_init(){
	
	struct disp_when data;
	
	memset(&data, 0, sizeof(data));
	data.app = ss_app;

	/* Rigister handler for CLR */
	data.command = ss_cmd_clr;
	CHECK_FCT_DO( fd_disp_register( ss_clr_ans_cb, DISP_HOW_CC, &data, NULL, NULL ), return 1 );
	
	/* Rigister handler for IDR */
	data.command = ss_cmd_idr;
	CHECK_FCT_DO( fd_disp_register( ss_idr_ans_cb, DISP_HOW_CC, &data, NULL, NULL ), return 1 );	

	/* Rigister handler for DSR */
	data.command = ss_cmd_dsr;
	CHECK_FCT_DO( fd_disp_register( ss_dsr_ans_cb, DISP_HOW_CC, &data, NULL, NULL ), return 1 );

	/* Rigister handler for RSR */
	data.command = ss_cmd_rsr;
	CHECK_FCT_DO( fd_disp_register( ss_rsr_ans_cb, DISP_HOW_CC, &data, NULL, NULL ), return 1 );
	
	return 0;
}

static int hss_serv_init(){
	
	struct disp_when data;
	
	memset(&data, 0, sizeof(data));
	data.app = ss_app;

	/* Rigister handler for ULR */
	data.command = ss_cmd_ulr;
	CHECK_FCT_DO( fd_disp_register( ss_ulr_ans_cb, DISP_HOW_CC, &data, NULL, NULL ), return 1 );

	/* Rigister handler for AIR message*/
	data.command = ss_cmd_air;
	CHECK_FCT_DO( fd_disp_register( ss_air_ans_cb, DISP_HOW_CC, &data, NULL, NULL ), return 1);

	/* Rigister handler for PUR */
	data.command = ss_cmd_pur;
	CHECK_FCT_DO( fd_disp_register( ss_pur_ans_cb, DISP_HOW_CC, &data, NULL, NULL ), return 1);

	/* Rigister handler for NOR */
	data.command = ss_cmd_nor;
	CHECK_FCT_DO( fd_disp_register( ss_nor_ans_cb, DISP_HOW_CC, &data, NULL, NULL ), return 1 );
	
	return 0;
}

static int init_common(){

	int ret;	

	/* Initialize the core library */
	ret = fd_core_initialize();
	if (ret != 0) {
		fprintf(stderr, "Error occurred Diameter initialization.\n");
		return ret;
	}

	/* Parse the configuration file */
	CHECK_FCT_DO( fd_core_parseconf(NULL), return 1 );

	/*Initialize the required avp dictionary*/
	CHECK_FCT_DO( ss_dict_init(), return 1);

	/* Start the servers */
	CHECK_FCT_DO( fd_core_start(), return 1 );	
	TRACE_DEBUG(INFO, FD_PROJECT_BINARY " Diameter initialized.");

	/* Advertise the support for the s6 interface application in the peer */
	CHECK_FCT_DO( fd_disp_app_support ( ss_app, ss_vendor, 1, 0 ), return 1 );	
	
	return 0;
}


int ss_mme_init(){

	/*Initialize the core diameter protocol and dictionaries and parse the configuration file*/
	CHECK_FCT_DO( init_common(), goto error);

	/*start diameter mme server*/
	CHECK_FCT_DO( mme_serv_init(), goto error);
	
	return 0;

	error:	
		CHECK_FCT( fd_core_shutdown());
		CHECK_FCT( fd_core_wait_shutdown_complete() );
		return 1;	

}

int ss_hss_init(){

	/*Initialize the core diameter protocol and dictionaries and parse the configuration file*/
	CHECK_FCT_DO( init_common(), goto error);
	
	/*start diameter mme server*/
	CHECK_FCT_DO( hss_serv_init(), goto error);	
	
	return 0;

error:	
	CHECK_FCT( fd_core_shutdown());
	CHECK_FCT( fd_core_wait_shutdown_complete() );
	return 1;	
}


int  ss_wait_shutdown(){

	/* Wait for termination */
	CHECK_FCT_DO( fd_core_wait_shutdown_complete(), return 1);
	return 0;
}


